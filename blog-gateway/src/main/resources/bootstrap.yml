spring:
  application:
    name: blog-gateway
  cloud:
    nacos:
#      server-addr: 127.0.0.1:8848
      server-addr: 60.205.189.14:8848
        # 路由网关配置
    gateway:
      # 设置与服务注册发现组件结合，这样可以采用服务名的路由策略
      discovery:
        locator:
          enabled: true
      # 配置路由规则
      routes:
        # 采用自定义路由 ID（有固定用法，不同的 id 有不同的功能，详见：https://cloud.spring.io/spring-cloud-gateway/2.0.x/single/spring-cloud-gateway.html#gateway-route-filters）
        - id: article
          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名
          uri: lb://blog-article
          order: 0
          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法
          predicates:
            - Path=/api/**,/blog/**
          filters:
            #自己配置的filte和工厂类生效
            - Auth
            # 重写路由去过滤服务名，就不需要再写uri了
            - RewritePath=/blog-article/(?<segment>.*), /$\{segment}
        - id: auth
          # 采用 LoadBalanceClient 方式请求，以 lb:// 开头，后面的是注册在 Nacos 上的服务名
          uri: lb://blog-auth
          order: 0
          # Predicate 翻译过来是“谓词”的意思，必须，主要作用是匹配用户的请求，有很多种用法
          predicates:
            - Path=/oauth/**
          filters:
            #自己配置的filte和工厂类生效
#            - Auth
            # 重写路由去过滤服务名，就不需要再写uri了
            - RewritePath=/blog-article/(?<segment>.*), /$\{segment}
      # 解决跨域问题
#      globalcors:
#        cors-configurations:
#          '[/**]':
#            allowedOrigins: "*"
#            allowedMethods: "*"
server:
  port: 9090
